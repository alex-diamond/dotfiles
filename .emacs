;;; package --- .emacs
;;; Commentary:
;;; GNU Emacs configuration file

;;; Code:
(require 'bookmark   nil :noerror)
(require 'bs         nil :noerror)
(require 'cc-mode    nil :noerror)
(require 'cl-lib     nil :noerror)
(require 'dired      nil :noerror)
(require 'dirtrack   nil :noerror)
(require 'eldoc      nil :noerror)
(require 'flyspell   nil :noerror)
(require 'font-lock  nil :noerror)
(require 'ibuffer    nil :noerror)
(require 'imenu      nil :noerror)
(require 'recentf    nil :noerror)
(require 'whitespace nil :noerror)
(require 'zone       nil :noerror)

(auto-fill-mode               -1 )
(column-number-mode            1 )
(delete-selection-mode         1 )
(display-time-mode             1 )
(electric-indent-mode          1 )
(electric-pair-mode           -1 )
(flyspell-mode                -1 )
(global-auto-revert-mode       1 )
(global-font-lock-mode         1 )
(global-hl-line-mode          -1 )
(global-prettify-symbols-mode  1 )
(global-subword-mode           1 )
(global-whitespace-mode        1 )
(icomplete-mode                1 )
(menu-bar-mode                -1 )
(recentf-mode                  1 )
(save-place-mode               1 )
(savehist-mode                 1 )
(scroll-bar-mode              -1 )
(show-paren-mode               1 )
(size-indication-mode          1 )
(tool-bar-mode                -1 )
(tooltip-mode                 -1 )
(transient-mark-mode           1 )

(defalias 'list-buffers 'ibuffer    )
(defalias 'perl-mode    'cperl-mode )
(defalias 'yes-or-no-p  'y-or-n-p   )

(setq-default abbrev-mode                         t   )
(setq-default apropos-do-all                      t   )
(setq-default auto-revert-check-vc-info           t   )
(setq-default auto-save-default                   t   )
(setq-default auto-window-vscroll                 nil )
(setq-default backup-by-copying                   t   )
(setq-default backup-directory-alist              nil )
(setq-default bookmark-save-flag                  t   )
(setq-default column-number-indicator-zero-based  nil )
(setq-default cursor-in-non-selected-windows      nil )
(setq-default debug-on-error                      t   )
(setq-default delete-by-moving-to-trash           t   )
(setq-default delete-old-versions                 t   )
(setq-default delete-trailing-lines               t   )
(setq-default display-time-24hr-format            t   )
(setq-default enable-recursive-minibuffers        t   )
(setq-default find-file-visit-truename            t   )
(setq-default font-lock-maximum-decoration        t   )
(setq-default gdb-enable-debug                    t   )
(setq-default gdb-many-windows                    t   )
(setq-default gdb-show-changed-values             t   )
(setq-default gdb-show-main                       t   )
(setq-default gdb-show-threads-by-default         t   )
(setq-default gdb-speedbar-auto-raise             t   )
(setq-default global-visual-line-mode             nil )
(setq-default history-delete-duplicates           t   )
(setq-default ibuffer-expert                      t   )
(setq-default ibuffer-show-empty-filter-groups    nil )
(setq-default imenu-auto-rescan                   t   )
(setq-default imenu-use-popup-menu                nil )
(setq-default indent-tabs-mode                    nil )
(setq-default inhibit-compacting-font-caches      t   )
(setq-default inhibit-startup-screen              t   )
(setq-default initial-scratch-message             nil )
(setq-default kill-whole-line                     t   )
(setq-default line-move-visual                    nil )
(setq-default make-backup-files                   nil )
(setq-default mouse-drag-copy-region              nil )
(setq-default mouse-wheel-follow-mouse            t   )
(setq-default mouse-wheel-progressive-speed       nil )
(setq-default next-line-add-newlines              nil )
(setq-default python-indent-guess-indent-offset   nil )
(setq-default query-replace-highlight             t   )
(setq-default recenter-redisplay                  nil )
(setq-default redisplay-dont-pause                t   )
(setq-default require-final-newline               t   )
(setq-default resize-mini-windows                 t   )
(setq-default save-interprogram-paste-before-kill t   )
(setq-default savehist-save-minibuffer-history    t   )
(setq-default scroll-preserve-screen-position     nil )
(setq-default search-highlight                    t   )
(setq-default select-enable-clipboard             t   )
(setq-default select-enable-primary               nil )
(setq-default sentence-end-double-space           nil )
(setq-default shift-select-mode                   nil )
(setq-default show-trailing-whitespace            t   )
(setq-default tags-revert-without-query           t   )
(setq-default track-eol                           t   )
(setq-default truncate-lines                      t   )
(setq-default truncate-partial-width-windows      nil )
(setq-default use-dialog-box                      nil )
(setq-default vc-make-backup-files                t   )
(setq-default version-control                     t   )
(setq-default x-stretch-cursor                    t   )

(setq-default gc-cons-threshold       (* 10240 10240 ) )
(setq-default read-process-output-max (*  1024  1024 ) )

(setq-default auto-save-timeout                  500    )
(setq-default c-basic-offset                       2    )
(setq-default calendar-week-start-day              1    )
(setq-default display-time-default-load-average    0    )
(setq-default history-length                    1000    )
(setq-default kept-new-versions                    2    )
(setq-default kept-old-versions                    1    )
(setq-default lazy-highlight-initial-delay         0    )
(setq-default lazy-highlight-interval              0    )
(setq-default recentf-max-menu-items              10    )
(setq-default recentf-max-saved-items            100    )
(setq-default scroll-conservatively             1000    )
(setq-default scroll-down-aggressively             0.01 )
(setq-default scroll-margin                        1    )
(setq-default scroll-step                          1    )
(setq-default scroll-up-aggressively               0.01 )
(setq-default show-paren-delay                     0    )
(setq-default tab-width                            2    )
(setq-default whitespace-line-column              90    )

(setq-default c-default-style    "bsd"                    )
(setq-default custom-file        "~/.emacs.d/custom.el"   )
(setq-default frame-title-format "CYBERDYNE Inc.: %b: %P" )

(setq-default backward-delete-char-untabify-method 'hungry                )
(setq-default calendar-date-style                  'european              )
(setq-default dired-recursive-copies               'always                )
(setq-default dired-recursive-deletes              'always                )
(setq-default initial-major-mode                   'fundamental-mode      )
(setq-default major-mode                           'text-mode             )
(setq-default mouse-wheel-scroll-amount            '(1 ((shift) . 1))     )
(setq-default recenter-positions                   '(top middle bottom)   )
(setq-default ring-bell-function                   'ignore                )
(setq-default save-abbrevs                         'silent                )
(setq-default show-paren-style                     'parenthesis           )
(setq-default tab-always-indent                    'complete              )
(setq-default whitespace-style                     '(face lines trailing) )

(defun c-common-mode ()
  "C/C++ common customization."
  (interactive)
  (c-toggle-auto-newline      1 )
  (c-toggle-auto-hungry-state 1 ))

(defun install-package (package-name)
  "Try installing an external package: 'PACKAGE-NAME'."
  (interactive)
  (condition-case
   err
   (unless (package-installed-p package-name)
     (package-initialize)
     (package-install package-name) nil)
   (error (princ (format "THE ERROR WAS: %s" err))) ))

(defun format-save-buffer ()
  "Format buffer before saving."
  (interactive)
  (save-excursion
   (recenter)
   (delete-trailing-whitespace)
   (if (equal major-mode 'makefile-gmake-mode)
       (tabify   (point-min) (point-max) )
       (untabify (point-min) (point-max) ))
   (unless (or (equal major-mode 'text-mode           )
               (equal major-mode 'python-mode         )
               (equal major-mode 'makefile-gmake-mode ))
     (indent-region (point-min) (point-max))))
  (save-buffer) nil)

(defun use-cedet-semantic ()
  "GNU Emacs CEDET & Semantic customization."
  (interactive)
  (require       'cedet               nil :noerror )
  (when (require 'semantic            nil :noerror )
    (require     'semantic/ia         nil :noerror )
    (require     'semantic/bovine/gcc nil :noerror )
    (when (executable-find "global")
      (semanticdb-enable-gnu-global-databases 'c-mode   )
      (semanticdb-enable-gnu-global-databases 'c++-mode ))
    (defvar *semantic-submodes*
      (list 'global-cedet-m3-minor-mode
            'global-semantic-decoration-mode
            'global-semantic-highlight-edits-mode
            'global-semantic-highlight-func-mode
            'global-semantic-idle-completions-mode
            'global-semantic-idle-local-symbol-highlight-mode
            'global-semantic-idle-scheduler-mode
            'global-semantic-idle-summary-mode
            'global-semantic-mru-bookmark-mode
            'global-semantic-show-parser-state-mode
            'global-semantic-stickyfunc-mode
            'global-semanticdb-minor-mode))
    (dolist (submode *semantic-submodes*)
      (add-to-list 'semantic-default-submodes submode))
    (semantic-mode)))

(defun kill-other-buffers ()
  "Kill all invispble buffers."
  (interactive)
  (delete-other-windows)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))) )

(defun legacy-theme ()
  "Use a legacy theme while everything else is broken."
  (interactive)
  (when (display-graphic-p)
    (load-theme 'wheatgrass t)
    (if (version< emacs-version "26.0.50")
        (progn
          (when (require 'linum nil :noerror)
            (line-number-mode  )
            (global-linum-mode ) ))
        (progn
          (global-display-line-numbers-mode)
          (setq-default display-line-numbers-type 'relative)) )) )

(when (not indicate-empty-lines)
  (toggle-indicate-empty-lines)
  (setq-default indicate-empty-lines t))

(if (file-exists-p bookmark-default-file)
    (bookmark-load bookmark-default-file t))

(add-hook 'c-mode-common-hook 'c-common-mode)
(add-hook 'makefile-mode-hook '(lambda () (setq-default indent-tabs-mode t)) )

(if (executable-find "ipython3")
    (progn
      (setq-default python-shell-interpreter      "ipython3"           )
      (setq-default python-shell-interpreter-args "--simple-prompt -i" ))
    (if (executable-find "python3")
        (progn
          (setq-default python-shell-interpreter      "python3" )
          (setq-default python-shell-interpreter-args "-i"      )) ))

(when (display-graphic-p)
  (blink-cursor-mode  )
  (zone-when-idle 300 )
  (setq-default cursor-type 'hollow)
  (add-to-list 'default-frame-alist '(top    .  50) )
  (add-to-list 'default-frame-alist '(left   .  50) )
  (add-to-list 'default-frame-alist '(width  . 120) )
  (add-to-list 'default-frame-alist '(height .  30) )
  (if (member         "JetBrains Mono"    (font-family-list) )
      (set-frame-font "JetBrains Mono 14"  t              t) )
  (setq-default zone-programs [zone-pgm-five-oclock-swan-dive])
  (fringe-mode                              '( 10     . 10    ))
  (setq-default indicate-buffer-boundaries '(( bottom . right )
                                             ( down   . right )
                                             ( top    . left  )
                                             ( up     . left  )
                                             ( t      . left  )) ))

(if (executable-find "scheme")
    (setq-default scheme-program-name "scheme")
    (autoload 'run-scheme  "cmuscheme" "Run an inferior Scheme" t )
    (autoload 'scheme-mode "cmuscheme" "Major mode for Scheme"  t ))

(global-unset-key             [down          ]                                  )
(global-unset-key             [left          ]                                  )
(global-unset-key             [right         ]                                  )
(global-unset-key             [up            ]                                  )
(global-set-key               (kbd "<f1>"    ) 'shell                           )
(global-set-key               (kbd "<f2>"    ) 'ibuffer                         )
(global-set-key               (kbd "<f3>"    ) 'comment-line                    )
(global-set-key               (kbd "<f4>"    ) 'bookmark-set                    )
(global-set-key               (kbd "<f5>"    ) 'bookmark-jump                   )
(global-set-key               (kbd "<f6>"    ) 'bookmark-bmenu-list             )
(global-set-key               (kbd "<f7>"    ) 'kmacro-start-macro              )
(global-set-key               (kbd "<f8>"    ) 'kmacro-end-macro                )
(global-set-key               (kbd "<f9>"    ) 'kmacro-call-macro               )
(global-set-key               (kbd "<f10>"   ) 'toggle-menu-bar-mode-from-frame )
(global-set-key               (kbd "<f11>"   ) 'toggle-frame-fullscreen         )
(global-set-key               (kbd "<f12>"   ) 'kill-other-buffers              )
(global-set-key               (kbd "C-x C-s" ) 'format-save-buffer              )
(windmove-default-keybindings                  'shift                           )

(when (require 'package nil :noerror) (package-initialize)
      (setq-default package-check-signature nil)
      (add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/" ) t )
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"    ) t )
      (add-to-list 'package-archives '("org"   . "https://orgmode.org/elpa/"      ) t )
      (unless package-archive-contents (package-refresh-contents)))

(install-package 'doom-themes)
(if (and (display-graphic-p)
         (package-installed-p 'doom-themes))
    (progn
      (setq-default doom-themes-enable-bold        t   )
      (setq-default doom-themes-enable-italic      t   )
      (setq-default doom-themes-padded-modeline    nil )
      (setq-default doom-vibrant-brighter-comments t   )
      (setq-default doom-vibrant-brighter-modeline t   )
      (setq-default doom-vibrant-comment-bg        t   )
      (setq-default doom-vibrant-padded-modeline   nil )
      (load-theme 'doom-vibrant                    t   )
      (doom-themes-org-config         )
      (doom-themes-visual-bell-config ) )
    (legacy-theme))

(install-package 'org)
(when (require 'org nil :noerror)
  (require 'ob nil :noerror)
  (when (executable-find "gpg2")
    (require 'org-crypt nil :noerror)
    (require 'epa-file  nil :noerror)
    (epa-file-enable                )
    (org-crypt-use-before-save-magic))
  (setq-default org-tags-exclude-from-inheritance '("crypt"))
  (org-babel-do-load-languages 'org-babel-load-languages
                               '(( awk        . t )
                                 ( emacs-lisp . t )
                                 ( gnuplot    . t )
                                 ( lisp       . t )
                                 ( makefile   . t )
                                 ( org        . t )
                                 ( perl       . t )
                                 ( python     . t )
                                 ( scheme     . t )
                                 ( sed        . t )
                                 ( shell      . t )) )
  (setq-default org-auto-align-tags                  t   )
  (setq-default org-checkbox-hierarchical-statistics nil )
  (setq-default org-confirm-babel-evaluate           nil )
  (setq-default org-crypt-key                        nil )
  (setq-default org-export-with-smart-quotes         t   )
  (setq-default org-fontify-done-headline            t   )
  (setq-default org-fontify-quote-and-verse-blocks   t   )
  (setq-default org-fontify-whole-heading-line       t   )
  (setq-default org-return-follows-link              t   )
  (setq-default org-src-fontify-natively             t   )
  (setq-default org-src-preserve-indentation         t   )
  (setq-default org-src-tab-acts-natively            t   )
  (setq-default org-startup-folded                   nil )
  (setq-default org-startup-indented                 t   )
  (setq-default org-startup-truncated                t   ))

(install-package 'avy)
(when (package-installed-p 'avy)
  (avy-setup-default)
  (setq-default avy-background  t   )
  (setq-default avy-all-windows nil )
  (global-set-key (kbd "C-:"   ) 'avy-goto-char   )
  (global-set-key (kbd "C-'"   ) 'avy-goto-char-2 )
  (global-set-key (kbd "M-g w" ) 'avy-goto-word-1 ))

(install-package 'cmake-mode)
(require 'cmake-mode nil :noerror)

(when (executable-find "git")
  (install-package              'magit        )
  (global-set-key (kbd "C-x g") 'magit-status ))

(install-package 'modern-cpp-font-lock)
(when (require 'modern-cpp-font-lock nil :noerror)
  (modern-c++-font-lock-global-mode))

(install-package 'expand-region)
(when (require 'expand-region nil :noerror)
  (global-set-key (kbd "C-=") 'er/expand-region))

(install-package 'flycheck)
(when (require 'flycheck nil :noerror) (global-flycheck-mode))

(install-package 'yasnippet)
(install-package 'yasnippet-snippets)
(when (require 'yasnippet nil :noerror)
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode))

(install-package 'slime)
(when (and (executable-find "sbcl")
           (require 'slime           nil :noerror))
  (require          'slime-autoloads nil :noerror)
  (slime-setup '(slime-asdf
                 slime-fancy
                 slime-tramp
                 slime-indentation))
  (setq-default inferior-lisp-program     "sbcl" )
  (setq-default common-lisp-style-default "sbcl" )
  (setq-default lisp-indent-function 'common-lisp-indent-function))

(if (executable-find "global")
    (install-package 'ggtags))
(if (package-installed-p 'ggtags)
    (progn
      (require 'ggtags nil :noerror)
      (setq-default ggtags-auto-jump-to-match 'first )
      (setq-default ggtags-update-on-save      t     )
      (setq-default ggtags-use-sqlite3         t     )
      (add-hook 'c-mode-common-hook
                (lambda ()
                  (when (derived-mode-p 'asm-mode 'c-mode 'c++-mode 'java-mode)
                    (ggtags-mode)
                    (use-cedet-semantic)) )) )
    (use-cedet-semantic))

(when (and (executable-find "clang")
           (executable-find "cmake"))
  (install-package 'rtags     )
  (install-package 'cmake-ide ))
(when (require 'rtags nil :noerror) (cmake-ide-setup)
      (setq-default rtags-completions-enabled   t )
      (setq-default rtags-autostart-diagnostics t )
      (add-hook 'c-mode-hook   'rtags-start-process-unless-running )
      (add-hook 'c++-mode-hook 'rtags-start-process-unless-running ))

(install-package 'multiple-cursors)
(when (require 'multiple-cursors nil :noerror)
  (global-set-key (kbd "C->"         ) 'mc/mark-next-like-this     )
  (global-set-key (kbd "C-<"         ) 'mc/mark-previous-like-this )
  (global-set-key (kbd "C-c C-<"     ) 'mc/mark-all-like-this      )
  (global-set-key (kbd "C-S-c C-S-c" ) 'mc/edit-lines              ))

(install-package 'cmake-font-lock)
(when (package-installed-p 'cmake-font-lock)
  (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
  (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t))

(install-package 'racket-mode)
(when (and (executable-find "racket")
           (require 'racket-mode nil :noerror))
  (add-hook 'racket-mode-hook      'racket-unicode-input-method-enable )
  (add-hook 'racket-repl-mode-hook 'racket-unicode-input-method-enable ))

(install-package 'helm)
(if (require 'helm nil :noerror)
    (when (require 'helm-config nil :noerror)
      (helm-mode)
      (global-set-key (kbd "M-x"     ) 'helm-M-x                )
      (global-set-key (kbd "C-x C-f" ) 'helm-find-files         )
      (global-set-key (kbd "C-x r b" ) 'helm-filtered-bookmarks ) )
    (when (require 'ido nil :noerror)
      (ido-mode       1 )
      (ido-everywhere 1 )
      (setq-default ido-use-virtual-buffers  t )
      (setq-default ido-enable-flex-matching t ) ))
(if (and (package-installed-p 'helm  )
         (package-installed-p 'rtags ))
    (install-package 'helm-rtags))
(if (package-installed-p 'helm-rtags)
    (setq-default rtags-display-result-backend 'helm))
(if (and (package-installed-p 'helm   )
         (package-installed-p 'ggtags ))
    (install-package 'helm-gtags))
(when (require 'helm-gtags nil :noerror)
  (add-hook 'asm-mode-hook  'helm-gtags-mode )
  (add-hook 'c-mode-hook    'helm-gtags-mode )
  (add-hook 'c++-mode-hook  'helm-gtags-mode )
  (add-hook 'java-mode-hook 'helm-gtags-mode )
  (setq-default helm-gtags-auto-update         t )
  (setq-default helm-gtags-ignore-case         t )
  (setq-default helm-gtags-pulse-at-cursor     t )
  (setq-default helm-gtags-use-input-at-cursor t ) )

(install-package 'company)
(when (and (executable-find "ctags")
           (package-installed-p 'rtags))
  (install-package 'company-ctags )
  (install-package 'company-rtags ))
(when (require 'company nil :noerror)
  (add-hook 'prog-mode-hook 'company-mode)
  (setq-default company-idle-delay            0 )
  (setq-default company-minimum-prefix-length 2 )
  (setq-default company-selection-wrap-around t )
  (setq-default company-show-numbers          t )
  (setq-default company-backends
                '((company-yasnippet
                   company-elisp company-files company-keywords
                   company-clang company-cmake company-semantic
                   company-ctags company-etags company-gtags company-rtags)) ))

(install-package 'elpy)
(when (require 'elpy nil :noerror)
  (elpy-enable)
  (add-hook
   'elpy-mode-hook (lambda () (add-hook 'before-save-hook 'elpy-format-code    nil t )) )
  (add-hook
   'elpy-mode-hook (lambda () (add-hook 'before-save-hook 'elpy-black-fix-code nil t )) ))

(provide '.emacs)

;;; .emacs ends here
